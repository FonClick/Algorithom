#include<bits/stdc++.h>
using namespace std;
vector<int>v[1000];
bool vis[1000];
int level[1000];
int par[10000];
void bfs(int src){
    queue<int>q;
    q.push(src);
    vis[src]=true;
    while(!q.empty()){
      int p =q.front();
       q.pop();
       //cout<<p<<endl;
       for(int child : v[p]){
            if(!vis[child]){
                q.push(child);
                vis[child]=true;
                level[child]=level[p]+1;
                par[child]=p;

           }
       }
    }
}

int main() {
    int n,e;
    cin>>n>>e;
    while(e--){
        int a,b;
        cin>>a>>b;
        v[a].push_back(b);
        v[b].push_back(a);


    }
    int src,des;
    cin>>src>>des;
    memset(vis,false,sizeof(vis));
    memset(level,-1,sizeof(level));
    memset(par,-1,sizeof(par));
    bfs(src);
     for(int i=0;i<n;i++){
        cout<<i<<"  ->  "<<level[i]<<endl;
     }
     cout<<endl<<"path Prient ->";
     int x= des;
     vector<int>path;
     while(x!=-1){
        path.push_back(x);
        cout<<x<<" ";
        x=par[x];
     }
     reverse(path.begin(), path.end());
      cout<<endl<<"path Prient ->";

       for(int val: path){
        cout<<val <<" ->";

     }
    return 0;
}
